import os
import telebot
from telebot import types
import logging
import httpx

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
API_BASE_URL = os.getenv("API_BASE_URL", "http://localhost:8000")

if not BOT_TOKEN:
    logger.warning("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. Telegram –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω.")
    bot = None
    user_states = {}
else:
    bot = telebot.TeleBot(BOT_TOKEN)
    user_states = {}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
AUTH_STATES = {
    'waiting_for_email': 'waiting_for_email',
    'waiting_for_password': 'waiting_for_password',
    'waiting_for_description': 'waiting_for_description'
}

# –ö—ç—à –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (telegram_id -> email)
authorized_users = {}

# –ö—ç—à —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è BasicAuth (telegram_id -> {email, password})
user_credentials = {}

# ---------- HTTP API helpers ----------
def _get_auth(telegram_id):
    creds = user_credentials.get(telegram_id)
    if not creds:
        return None
    return httpx.BasicAuth(creds["email"], creds["password"])  # type: ignore[arg-type]

def api_signup(email: str, password: str) -> dict:
    url = f"{API_BASE_URL}/api/users/signup"
    with httpx.Client(timeout=10.0) as client:
        resp = client.post(url, json={"email": email, "password": password, "is_admin": False})
        return {"ok": resp.status_code in (200, 201), "status": resp.status_code, "data": resp.json() if resp.content else {}}

def api_signin(email: str, password: str) -> dict:
    url = f"{API_BASE_URL}/api/users/signin"
    with httpx.Client(timeout=10.0) as client:
        resp = client.post(url, json={"email": email, "password": password})
        return {"ok": resp.status_code == 200, "status": resp.status_code, "data": resp.json() if resp.content else {}}

def api_get_balance(telegram_id: int) -> dict:
    url = f"{API_BASE_URL}/api/users/balance"
    auth = _get_auth(telegram_id)
    if not auth:
        return {"ok": False, "status": 401, "data": {}}
    with httpx.Client(timeout=10.0, auth=auth) as client:
        resp = client.get(url)
        return {"ok": resp.status_code == 200, "status": resp.status_code, "data": resp.json() if resp.content else {}}

def api_get_prediction_history(telegram_id: int) -> dict:
    url = f"{API_BASE_URL}/api/events/prediction/history"
    auth = _get_auth(telegram_id)
    if not auth:
        return {"ok": False, "status": 401, "data": {}}
    with httpx.Client(timeout=20.0, auth=auth) as client:
        resp = client.get(url)
        return {"ok": resp.status_code == 200, "status": resp.status_code, "data": resp.json() if resp.content else []}

def api_create_prediction(telegram_id: int, message: str, top: int = 10) -> dict:
    url = f"{API_BASE_URL}/api/events/prediction/new"
    auth = _get_auth(telegram_id)
    if not auth:
        return {"ok": False, "status": 401, "data": {}}
    # FastAPI expects query params for primitive args unless Body is specified
    params = {"message": message, "top": top}
    with httpx.Client(timeout=60.0, auth=auth) as client:
        resp = client.post(url, params=params)
        return {"ok": resp.status_code == 200, "status": resp.status_code, "data": resp.json() if resp.content else []}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    if not bot:
        return
    
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id in authorized_users:
        show_main_menu(message)
        return
    
    logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    
    welcome_text = (
        "üé¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Movie Recommendation Bot!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º—ã –ø–æ –≤–∞—à–µ–º—É –≤–∫—É—Å—É.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üîê –í–æ–π—Ç–∏", callback_data="auth_signin"),
        types.InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="auth_signup")
    )
    
    bot.reply_to(message, welcome_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('auth_'))
def handle_auth_callback(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    if not bot:
        return
    
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    
    if call.data == "auth_signin":
        start_signin(chat_id, user_id)
    elif call.data == "auth_signup":
        start_signup(chat_id, user_id)
    elif call.data == "auth_back":
        send_welcome(call.message)

def start_signin(chat_id, user_id):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Ö–æ–¥–∞"""
    user_states[chat_id] = AUTH_STATES['waiting_for_email']
    user_states[f"{chat_id}_auth_type"] = "signin"
    
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="auth_back"))
    
    bot.send_message(
        chat_id,
        "üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
        reply_markup=markup
    )

def start_signup(chat_id, user_id):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_states[chat_id] = AUTH_STATES['waiting_for_email']
    user_states[f"{chat_id}_auth_type"] = "signup"
    
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="auth_back"))
    
    bot.send_message(
        chat_id,
        "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: 
    message.chat.id in user_states and 
    user_states[message.chat.id] == AUTH_STATES['waiting_for_email'])
def handle_email_input(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email"""
    if not bot:
        return
    
    chat_id = message.chat.id
    user_id = message.from_user.id
    email = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
    if '@' not in email or '.' not in email:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–∞—Ä–æ–ª—é
    user_states[f"{chat_id}_email"] = email
    user_states[chat_id] = AUTH_STATES['waiting_for_password']
    
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="auth_back"))
    
    auth_type = user_states.get(f"{chat_id}_auth_type", "signin")
    action_text = "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" if auth_type == "signup" else "–≤—Ö–æ–¥–∞"
    
    bot.reply_to(
        message,
        f"‚úÖ Email —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {email}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è {action_text}:\n"
        f"–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, "
        f"–≤–∫–ª—é—á–∞—è –≤–µ—Ä—Ö–Ω–∏–π –∏ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä, –∞ —Ç–∞–∫–∂–µ —Ü–∏—Ñ—Ä—ã.",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: 
    message.chat.id in user_states and 
    user_states[message.chat.id] == AUTH_STATES['waiting_for_password'])
def handle_password_input(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è"""
    if not bot:
        return
    
    chat_id = message.chat.id
    user_id = message.from_user.id
    password = message.text.strip()
    email = user_states.get(f"{chat_id}_email", "")
    auth_type = user_states.get(f"{chat_id}_auth_type", "signin")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    if len(password) < 8:
        bot.reply_to(message, "‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    if not any(c.isupper() for c in password):
        bot.reply_to(message, "‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É.")
        return
    
    if not any(c.islower() for c in password):
        bot.reply_to(message, "‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É.")
        return
    
    if not any(c.isdigit() for c in password):
        bot.reply_to(message, "‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É.")
        return
    
    try:
        if auth_type == "signup":
            result = handle_signup(email, password, user_id)
        else:
            result = handle_signin(email, password, user_id)

        if result['success']:
            cleanup_auth_states(chat_id)
            show_main_menu(message)
        else:
            bot.reply_to(message, f"‚ùå {result['message']}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        cleanup_auth_states(chat_id)

def handle_signup(email, password, telegram_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ HTTP API"""
    try:
        resp = api_signup(email, password)
        if not resp["ok"]:
            # –ö–æ–Ω—Ñ–ª–∏–∫—Ç 409 –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
            detail = resp.get("data", {}).get("detail") if isinstance(resp.get("data"), dict) else None
            return {'success': False, 'message': detail or '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.'}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        user_credentials[telegram_id] = {"email": email, "password": password}
        authorized_users[telegram_id] = email
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {email}")
        return {'success': True, 'message': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!'}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        return {'success': False, 'message': '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.'}

def handle_signin(email, password, telegram_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ HTTP API"""
    try:
        resp = api_signin(email, password)
        if not resp["ok"]:
            detail = resp.get("data", {}).get("detail") if isinstance(resp.get("data"), dict) else None
            return {'success': False, 'message': detail or '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.'}

        user_credentials[telegram_id] = {"email": email, "password": password}
        authorized_users[telegram_id] = email
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {email}")
        return {'success': True, 'message': '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!'}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {str(e)}")
        return {'success': False, 'message': '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞.'}

def cleanup_auth_states(chat_id):
    """–û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    keys_to_remove = [
        chat_id,
        f"{chat_id}_auth_type",
        f"{chat_id}_email"
    ]
    for key in keys_to_remove:
        if key in user_states:
            del user_states[key]

def show_main_menu(message):
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    if not bot:
        return
    
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    logger.info(f"show_main_menu –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logger.info(f"authorized_users: {authorized_users}")
    logger.info(f"user_id –≤ authorized_users: {user_id in authorized_users}")
    
    if user_id not in authorized_users:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /start")
        send_welcome(message)
        return
    
    try:
        email = authorized_users.get(user_id)
        if not email or user_id not in user_credentials:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /start")
            send_welcome(message)
            return

        balance_resp = api_get_balance(user_id)
        if not balance_resp["ok"]:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å: {balance_resp['status']}")
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é.")
            return
        balance = balance_resp["data"].get("Current balance", 0)

        menu_text = (
            f"üé¨ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {email}\n"
            f"üí≥ –ë–∞–ª–∞–Ω—Å: {balance} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.row(
            types.InlineKeyboardButton("üéØ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="menu_predict"),
            types.InlineKeyboardButton("üìö –ò—Å—Ç–æ—Ä–∏—è", callback_data="menu_history")
        )
        markup.row(
            types.InlineKeyboardButton("üí≥ –ë–∞–ª–∞–Ω—Å", callback_data="menu_balance"),
            types.InlineKeyboardButton("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings")
        )
        markup.row(types.InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data="menu_logout"))

        bot.send_message(chat_id, menu_text, reply_markup=markup, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {str(e)}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('menu_'))
def handle_menu_callback(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    if not bot:
        return
    
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    
    if call.data == "menu_predict":
        start_prediction(chat_id, user_id)
    elif call.data == "menu_history":
        show_history(call.message)
    elif call.data == "menu_balance":
        show_balance_for_callback(call.message)
    elif call.data == "menu_settings":
        show_settings(chat_id, user_id)
    elif call.data == "menu_logout":
        handle_logout(call.message)

def start_prediction(chat_id, user_id):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    if not bot:
        return
    
    if user_id not in authorized_users:
        bot.send_message(chat_id, "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.")
        return
    
    user_states[chat_id] = AUTH_STATES['waiting_for_description']
    
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_back"))
    
    bot.send_message(
        chat_id,
        "üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ —Ñ–∏–ª—å–º—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ "
        "(–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=markup
    )

def handle_logout(message):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    if not bot:
        return
    
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏ –∑–∞–±—ã–≤–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id in authorized_users:
        del authorized_users[user_id]
    if user_id in user_credentials:
        del user_credentials[user_id]
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    cleanup_auth_states(chat_id)
    
    bot.reply_to(message, "üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
    send_welcome(message)

@bot.message_handler(func=lambda message: 
    message.chat.id in user_states and 
    user_states[message.chat.id] == AUTH_STATES['waiting_for_description'])
def handle_description(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    if not bot:
        return
    
    chat_id = message.chat.id
    user_id = message.from_user.id
    input_text = message.text
    
    if user_id not in authorized_users:
        bot.reply_to(message, "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.")
        return
    
    if len(input_text) < 10:
        bot.reply_to(message, "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    try:
        if user_id not in authorized_users or user_id not in user_credentials:
            bot.reply_to(message, "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.")
            return

        bot.reply_to(message, "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        pred_resp = api_create_prediction(user_id, input_text, top=10)
        if not pred_resp["ok"]:
            if pred_resp["status"] == 402:
                # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
                balance_resp = api_get_balance(user_id)
                balance = balance_resp["data"].get("Current balance", 0) if balance_resp["ok"] else "N/A"
                bot.reply_to(message, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.")
                return
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {pred_resp['status']}")
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        movies = pred_resp["data"] or []
        if not movies:
            bot.reply_to(message, "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–∏–ª—å–º—ã.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è
        balance_resp = api_get_balance(user_id)
        new_balance = balance_resp["data"].get("Current balance", "N/A") if balance_resp["ok"] else "N/A"

        response_text = f"üé¨ –ù–∞–π–¥–µ–Ω–æ {len(movies)} —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{input_text}'\n\n"
        for i, movie in enumerate(movies, 1):
            title = movie.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            year = movie.get("year", "N/A")
            genres = movie.get("genres") or []
            response_text += f"{i}. **{title}** ({year})\n"
            response_text += f"   –ñ–∞–Ω—Ä—ã: {', '.join(genres[:3]) if genres else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n\n"

        response_text += f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance}"

        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_back"))

        bot.reply_to(message, response_text, reply_markup=markup, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if chat_id in user_states:
        del user_states[chat_id]

@bot.message_handler(commands=['history'])
def show_history(message):
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    if not bot:
        return
    
    user_id = message.from_user.id
    
    if user_id not in authorized_users:
        bot.reply_to(message, "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.")
        return
    
    try:
        if user_id not in authorized_users or user_id not in user_credentials:
            bot.reply_to(message, "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.")
            return

        hist_resp = api_get_prediction_history(user_id)
        if not hist_resp["ok"]:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {hist_resp['status']}")
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.")
            return

        predictions = hist_resp["data"] or []
        if not predictions:
            bot.reply_to(message, "üìö –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
            return

        response = "üìö –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:\n\n"
        for i, pred in enumerate(predictions[-5:], 1):
            input_text = (pred.get("input_text") or "")[:50]
            cost = pred.get("cost", "N/A")
            timestamp = pred.get("timestamp", "")
            movies = pred.get("movies") or []
            response += f"{i}. {input_text}...\n"
            response += f"   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
            response += f"   üìÖ –î–∞—Ç–∞: {timestamp.replace('T', ' ')[:16] if isinstance(timestamp, str) else 'N/A'}\n"
            response += f"   üé¨ –§–∏–ª—å–º–æ–≤: {len(movies)}\n\n"

        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_back"))

        bot.reply_to(message, response, reply_markup=markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.")

def show_balance_for_callback(message):
    """–ü–æ–∫–∞–∑ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è callback'–æ–≤"""
    if not bot:
        return
    
    user_id = message.from_user.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logger.info(f"authorized_users: {authorized_users}")
    logger.info(f"user_id –≤ authorized_users: {user_id in authorized_users}")
    
    if user_id not in authorized_users:
        bot.reply_to(message, "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.")
        return
    
    try:
        if user_id not in authorized_users or user_id not in user_credentials:
            bot.reply_to(message, "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.")
            return

        balance_resp = api_get_balance(user_id)
        if not balance_resp["ok"]:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {balance_resp['status']}")
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.")
            return

        balance = balance_resp["data"].get("Current balance", 0)
        response = f"üí≥ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"

        if balance < 10:
            response += "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.\n"
            response += "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost/web"
        else:
            response += "‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."

        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_back"))

        bot.reply_to(message, response, reply_markup=markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {str(e)}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.")

@bot.message_handler(commands=['balance'])
def show_balance(message):
    """–ü–æ–∫–∞–∑ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not bot:
        return
    
    user_id = message.from_user.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logger.info(f"authorized_users: {authorized_users}")
    logger.info(f"user_id –≤ authorized_users: {user_id in authorized_users}")
    
    if user_id not in authorized_users:
        bot.reply_to(message, "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.")
        return
    
    try:
        if user_id not in authorized_users or user_id not in user_credentials:
            bot.reply_to(message, "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.")
            return

        balance_resp = api_get_balance(user_id)
        if not balance_resp["ok"]:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {balance_resp['status']}")
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.")
            return

        balance = balance_resp["data"].get("Current balance", 0)
        response = f"üí≥ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"

        if balance < 10:
            response += "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.\n"
            response += "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost/web"
        else:
            response += "‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."

        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_back"))

        bot.reply_to(message, response, reply_markup=markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {str(e)}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.")

@bot.message_handler(commands=['help'])
def show_help(message):
    """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏"""
    if not bot:
        return
    
    help_text = (
        "ü§ñ **Movie Recommendation Bot - –°–ø—Ä–∞–≤–∫–∞**\n\n"
        "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
        "1. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start\n"
        "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
        "3. –ü–æ–ª—É—á–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
        "**–°—Ç–æ–∏–º–æ—Å—Ç—å:** 10 –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ –∑–∞–ø—Ä–æ—Å\n"
        "**–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:** http://localhost/web"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_back"))
    
    bot.reply_to(message, help_text, reply_markup=markup, parse_mode='Markdown')

def show_settings(chat_id, user_id):
    """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not bot:
        return
    
    settings_text = (
        "üîß **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º.\n\n"
        "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_back"))
    
    bot.send_message(chat_id, settings_text, reply_markup=markup, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda call: call.data == "menu_back")
def handle_menu_back(call):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if not bot:
        return
    
    show_main_menu(call.message)