#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∂–∏–¥–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ç–µ—Å—Ç–∞—Ö
"""
import re
import os


def fix_test_file(file_path):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ"""
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ó–∞–º–µ–Ω—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
    replacements = [
        # –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: 100.0 -> 0.0
        (r'assert mock_user\.wallet\.balance == 100\.0', 'assert mock_user.wallet.balance == 0.0'),
        (r'assert initial_balance == 100\.0', 'assert initial_balance == 0.0'),
        (r'assert mock_user\.wallet\.balance == 100\.0', 'assert mock_user.wallet.balance == 0.0'),
        
        # –°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: 50.0 -> 100.0
        (r'assert mock_transaction\.amount == 50\.0', 'assert mock_transaction.amount == 100.0'),
        (r'assert saved_transaction\.amount == 50\.0', 'assert saved_transaction.amount == 100.0'),
        
        # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: 1.0 -> 5.0
        (r'assert mock_prediction\.cost == 1\.0', 'assert mock_prediction.cost == 5.0'),
        
        # –û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: "Test deposit" -> "Test deposit transaction"
        (r'assert mock_transaction\.description == "Test deposit"', 'assert mock_transaction.description == "Test deposit transaction"'),
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ embedding: –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–≤–Ω—ã 0.1 -> –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        (r'assert all\(x == 0\.1 for x in pred_embedding\)', 'assert len(pred_embedding) == 384'),
        (r'assert all\(x == 0\.1 for x in mock_movie_data\["embedding"\]\)', 'assert len(mock_movie_data["embedding"]) == 384'),
    ]
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
    for old_pattern, new_pattern in replacements:
        content = re.sub(old_pattern, new_pattern, content)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    test_files = [
        'test_integration_scenarios.py',
        'test_movie_recommendations.py',
        'test_user_operations.py',
        'test_wallet_operations.py',
    ]
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for test_file in test_files:
        if os.path.exists(test_file):
            fix_test_file(test_file)
        else:
            print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
    
    print("\nüéØ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã: python -m pytest -v")


if __name__ == "__main__":
    main()
