version: '3.8'

services:
  app:
    build: ./app
    env_file:
      - ./app/.env
    volumes:
      - ./app:/app
    ports:
      - "8000:8000"
    networks:
      - app-network
    command: python main.py
    depends_on:
      - database
      - rabbitmq

  ml_worker:
    build: ./ml_worker/
    image: event-planner-ml-worker:latest
    container_name: event-planner-ml-worker
    restart: unless-stopped
    env_file:
    - ./ml_worker/.env
    volumes:
      - ./ml_worker:/app
    depends_on:
      - db
      - rabbitmq
    networks:
      - event-planner-network

  web-proxy:
    build: ./nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - app
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3.13.1-management-alpine
    container_name: rabbitmq_for_planner
    hostname: rabbitmq
    restart: unless-stopped
    env_file:
      - ./app/.env
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 2147483648
    volumes:
      - rabbitmq_volume:/var/lib/rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - event-planner-network

  database:
    image: postgres:16-alpine
    container_name: myapp
    restart: unless-stopped
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    networks:
      - app-network
    env_file:
      - ./app/.env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      

volumes:
  postgres_volume:
  rabbitmq_volume:

networks:
  app-network:
    name: app-network
    driver: bridge